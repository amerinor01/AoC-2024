use std::collections::HashMap;
use std::fs;

pub fn first() {
    // --snip--
    let file_path = String::from("inputs/day2.txt");
    let contents = fs::read_to_string(file_path).expect("Should have been able to read the file");

    let r: i32 = fs::read_to_string(file_path.clone())
        .expect("Should have been able to read the file")
        .lines()
        .filter(|s| { //use of filtermap to avoid empty lines
            let inner: Vec<i32> = s
                .split_whitespace()
                .filter_map(|v| v.parse().ok()) // parse each part as i32
                .collect();

            if inner.len() < 2 {
                return false; //Skip small arrays with less that 2 elements
            }

            let (min_diff, max_diff) = inner
                .windows(2)
                .map(|v| v[0] - v[1])
                .fold((i32::MAX, i32::MIN), |(min_diff, max_diff), x| {
                    (min_diff.min(x), max_diff.max(x))
                });

            // Correct the logical expression
            let valid_sign = (min_diff > 0 && max_diff > 0) || (min_diff < 0 && max_diff < 0); // Both are either positive or negative
            let valid_range = min_diff >= -3 && max_diff < 4; // Range check
            valid_sign && valid_range // Combine both conditions      //((min > 0 && max > 0) || (min < 0 && max < 0)) && (min >= -3 && max < 4)
        })
        .count() as i32;
    println!("{:?}", r);
}

pub fn second() {
    // --snip--
    let file_path = String::from("inputs/day1.txt");

    let contents = fs::read_to_string(file_path).expect("Should have been able to read the file");

    let mut merged: Vec<_> = contents
        .split('\n')
        .flat_map(|str| str.split("   "))
        .map(str::to_owned)
        .collect();
    //let mut merged = v.collect::<Vec<_>>();
    merged.pop();

    let mut odd: Vec<i32> = merged
        .iter()
        .skip(1)
        .step_by(2)
        .map(|value| value.parse().unwrap())
        .collect();
    odd.sort();
    let mut even: Vec<i32> = merged
        .iter()
        .step_by(2)
        .map(|value| value.parse().unwrap())
        .collect();
    even.sort();

    let appears: HashMap<_, _> = odd.iter().fold(HashMap::new(), |mut acc, &item| {
        *acc.entry(item).or_insert(0) += 1;
        acc
    });

    let result: i32 = even
        .iter()
        .map(|value| appears.get(value).unwrap_or(&0) * value)
        .sum();

    println!("{:?}", result);
}
